#!/bin/bash

bootstrap_url=https://github.com/Attentis-Consulting-Inc/sfdx-bootstrap/archive/main.zip
bootstrap_tmp_file=tmp/sfdx-bootstrap.zip
bootstrap_tmp_dir=tmp/sfdx-bootstrap
default_files_dir=.default_sfdx_files

validations_url=https://github.com/Attentis-Consulting-Inc/validation-scripts/main
validations_filename=validation_scripts.zip

pmd_version="7.0.0"
pmd_file="pmd-dist-$pmd_version-bin.zip"
pmd_dir="pmd-bin-$pmd_version"
pmd_attentis_ruleset_url="https://raw.githubusercontent.com/Attentis-Consulting-Inc/pmd/main/apex.xml"

# Guard for required commands and files
valid_reqs=true
[ "$(command -v npm)" ] || { echo "Cannot find command npm. Is it installed?" >&2 && valid_reqs=false; }
[ "$(command -v sf)" ] || { echo "Cannot find command sf. Is the Salesforce cli installed?" >&2 && valid_reqs=false; }
[ "$(command -v jq)" ] || { echo "Cannot find command jq. Is it installed?" >&2 && valid_reqs=false; }

[ $valid_reqs = true ] || { echo "" && echo "Some prerequisites not met. Please follow the setup instructions on the repository" >&2 && exit 1; }

# Check if being run on an existing project, or prompt to create new one
new_project=false
if [ ! -f sfdx-project.json ]; then
    read -r -p "Not in an SFDX project. Create one here? (Y/n) " project_yn
    [[ "$project_yn" == [Nn]* ]] && exit 0
    project_name=
    while [ -z "$project_name" ]; do
        read -r -p "Enter the name of the project: " project_name
    done
    sf generate project -n "$project_name" || exit 1
    cd "$project_name" || exit 1
    new_project=true
fi

printf "\e[1;34m-----\n\u279C Gathering bootstrap files\n-----\e[0m\n"
curl -JL "$bootstrap_url" -o "$bootstrap_tmp_file" || { echo "Failed to download bootstrap files. Check errors and try again" >&2 && exit 1; }
unzip -q "$bootstrap_tmp_file" -d "$bootstrap_tmp_dir"
trap "rm -rf $bootstrap_tmp_dir $bootstrap_tmp_file" EXIT

printf "\e[1;34m-----\n\u279C Git setup\n-----\e[0m\n"

if [ -d .git ]; then
    printf "\e[1;33m\u2BC5\e[0m Project is already a git repository\n"
else
    git init >/dev/null && printf "\e[1;32m\u2713\e[0m Repository set up\n"
fi

if [ -z "$WINDIR" ]; then # Don't try to create symlinks on Windows, as it depends on the Git bash installation
    if [ -f .gitignore-local ]; then
        printf "\e[1;33m\u2BC5\e[0m Found a local git ignore file\n"
    else
        ln -s .git/info/exclude .gitignore-local
        echo ".gitignore-local" >.gitignore-local
        printf "\e[1;32m\u2713\e[0m Created .gitignore-local file\n"
        printf "\e[1;33m\u0021\e[0m You can use this file to ignore files in git without committing changes to .gitignore\n"
    fi
fi

if [ -f .rgignore ]; then
    printf "\e[1;33m\u2BC5\e[0m Found a ripgrep ignore file\n"
elif [ "$(command -v rg)" ]; then
    cp .gitignore .rgignore
    [ -f .gitignore-local ] && echo ".rgignore" >>.gitignore-local

    printf "\e[1;32m\u2713\e[0m Found rg command and created .rgignore file with .gitignore contents\n"
    printf "\e[1;33m\u0021\e[0m You can use this file to ignore files when using ripgrep\n"
fi

if [ -f omnistudio-components.json ]; then
    printf "\e[1;33m\u2BC5\e[0m Found omnistudio-components.json file\n"
else
    jq '[.packageDirectories[].path] | map ( { (.):[] } ) | add' sfdx-project.json >omnistudio-components.json
    printf "\e[1;32m\u2713\e[0m Created omnistudio-components.json file\n"
    printf "\e[1;33m\u0021\e[0m You can use this file to list omnistudio LWCs in each project package, so they can be excluded from certain validations\n"
fi

printf "\e[1;34m-----\n\u279C Installing project packages\n-----\e[0m\n"
npm install -D
npm_installed_packages=$(npm ls -i)

prettier_installed=false
(echo "$npm_installed_packages" | grep "prettier@" >/dev/null 2>&1) && (echo "$npm_installed_packages" | grep "prettier-plugin-apex@" >/dev/null 2>&1) && printf "\e[1;32m\u2713\e[0m Prettier and Apex plugin installed\n" && prettier_installed=true
if [ $prettier_installed = false ]; then
    {
        npm install -D prettier prettier-plugin-apex &&
            printf "\n\e[1;32m\u2713\e[0m Prettier and Apex plugin installed\n" &&
            prettier_installed=true
    } || printf "\n\e[1;31m\u274C\e[0m Failed to install Prettier and Apex plugin. Check errors and try again to complete Prettier setup\n"
fi

if $prettier_installed; then
    [ -f .prettierrc ] || echo "{\"trailingComma\": \"none\"}" >.prettierrc

    if $new_project || cmp -s .prettierrc "$bootstrap_tmp_dir"/"$default_files_dir"/.prettierrc; then
        printf "\e[1;33m\u0021\e[0m Overwriting default .prettierrc to include Apex rules\n"
        cp "$bootstrap_tmp_dir"/.prettierrc .prettierrc
    else
        printf "\e[1;33m\u0021\e[0m Adding Apex rules to .prettierrc\n"
        if ! jq -e '.overrides[]' .prettierrc &>/dev/null; then
            temp_prettierrc=$(mktemp)
            jq '.overrides = []' .prettierrc >"$temp_prettierrc"
            mv -- "$temp_prettierrc" .prettierrc
        fi
        if ! jq -e '.overrides[] | select(.files=="*.{cls,trigger}")' .prettierrc &>/dev/null; then
            temp_prettierrc=$(mktemp)
            jq '.overrides += [{"files": "*.{cls,trigger}"}]' .prettierrc >"$temp_prettierrc"
            mv -- "$temp_prettierrc" .prettierrc
            printf "\t\e[1;32m\u2713\e[0m Created Prettier rules for Apex\n"
        fi
        if ! jq -e '.overrides[] | select(.files=="*.{cls,trigger}").options' .prettierrc &>/dev/null; then
            temp_prettierrc=$(mktemp)
            jq '.overrides = [.overrides[] | select(.files=="*.{cls,trigger}") += {"options": {}}]' .prettierrc >"$temp_prettierrc"
            mv -- "$temp_prettierrc" .prettierrc
        fi
        if [ ! "$(jq -e '.overrides[] | select(.files=="*.{cls,trigger}").options.tabWidth' .prettierrc 2>/dev/null)" = "4" ]; then
            temp_prettierrc=$(mktemp)
            jq '.overrides = [.overrides[] | select(.files=="*.{cls,trigger}").options.tabWidth = 4]' .prettierrc >"$temp_prettierrc"
            mv -- "$temp_prettierrc" .prettierrc
            printf "\t\e[1;32m\u2713\e[0m Set up tabWidth of 4 for Apex\n"
        fi
        if [ ! "$(jq -e '.overrides[] | select(.files=="*.{cls,trigger}").options.printWidth' .prettierrc 2>/dev/null)" = "120" ]; then
            temp_prettierrc=$(mktemp)
            jq '.overrides = [.overrides[] | select(.files=="*.{cls,trigger}").options.printWidth = 120]' .prettierrc >"$temp_prettierrc"
            mv -- "$temp_prettierrc" .prettierrc
            printf "\t\e[1;32m\u2713\e[0m Set up printWidth of 120 for Apex\n"
        fi
        printf "\t\e[1;32m\u2713\e[0m .prettierrc is set up with Apex rules\n"
    fi
fi

setup_lwc=false
{ (echo "$npm_installed_packages" | grep "eslint@" >/dev/null 2>&1) && (echo "$npm_installed_packages" | grep "@lwc/eslint-plugin-lwc@" >/dev/null 2>&1) && (echo "$npm_installed_packages" | grep "@salesforce/eslint-config-lwc@" >/dev/null 2>&1) && (echo "$npm_installed_packages" | grep "@salesforce/eslint-plugin-aura@" >/dev/null 2>&1) && (echo "$npm_installed_packages" | grep "@salesforce/eslint-plugin-lightning@" >/dev/null 2>&1) && (echo "$npm_installed_packages" | grep "@salesforce/sfdx-lwc-jest" >/dev/null 2>&1); } || setup_lwc=true

if $setup_lwc; then
    sf force lightning lwc test setup
fi
printf "\n\e[1;32m\u2713\e[0m ESLint and Jest installed\n"

printf "\e[1;34m-----\n\u279C Setting up sa11y/jest and required canvas dependency\n-----\e[0m\n"
packages_to_install=
(echo "$npm_installed_packages" | grep "@sa11y/jest@" >/dev/null 2>&1) || packages_to_install+="@sa11y/jest "

(echo "$npm_installed_packages" | grep "canvas@" >/dev/null 2>&1) || packages_to_install+="canvas "

if [ -n "$packages_to_install" ]; then
    { echo "$packages_to_install" | xargs npm install -D && printf "\e[1;32m\u2713\e[0m sa11y/jest and canvas installed.\n"; } || printf "\n\e[1;31m\u274C\e[0m Failed to install @sa11y/jest or canvas. Check errors and try again.\n"
else
    printf "\e[1;32m\u2713\e[0m sa11y/jest and canvas already installed.\n"
fi

mkdir -p jest/setupFiles

if [ -f jest/setupFiles/sa11y-setup.js ]; then
    printf "\e[1;32m\u2BC5\e[0m sa11y setup file already exists. Not overwriting.\n"
else
    cp "$bootstrap_tmp_dir"/jest/setupFiles/sa11y-setup.js jest/setupFiles
    printf "\e[1;32m\u2713\e[0m Created jest/setupFiles/sa11y-setup.js. Make sure it is called from jest.config.js\n"
fi

if [ -f jest/setupFiles/setEnvVars.js ]; then
    printf "\e[1;32m\u2BC5\e[0m setEnvVars.js file for jest already exists. Not overwriting.\n"
else
    cp "$bootstrap_tmp_dir"/jest/setupFiles/setEnvVars.js jest/setupFiles
    printf "\e[1;32m\u2713\e[0m Created jest/setupFiles/setEnvVars.js using the extended ruleset. Make sure it is called from jest.config.js\n"
fi

write_jestconfig=false
if [ ! -f jest.config.js ] || $new_project || cmp -s jest.config.js "$bootstrap_tmp_dir"/"$default_files_dir"/jest.config.js; then
    write_jestconfig=true
else
    printf "\e[1;32m\u2BC5\e[0m Customized Jest config file (jest.config.js) already exists. Not overwriting. Check the bootstrap repository's README on how to add these to your jest.config.js file, if needed.\n"
fi

if $write_jestconfig; then
    cp "$bootstrap_tmp_dir"/jest.config.js jest.config.js
    printf "\e[1;32m\u2713\e[0m jest.config.js written\n"
fi

printf "\e[1;34m-----\n\u279C Setting up PMD\n-----\e[0m\n"

install_pmd=false
[ -f pmd/bin/pmd ] || install_pmd=true
if [ "$(command -v pmd)" ] && [ $install_pmd = true ]; then
    read -r -p "Found global pmd command, set up local binary anyways? (y/N): " pmd_yn
    echo
    [[ "$pmd_yn" == [Yy]* ]] || install_pmd=false
fi

if $install_pmd; then
    printf "\e[1;33m\u2BC5\e[0m Downloading PMD v%s\n" $pmd_version
    curl -LO https://github.com/pmd/pmd/releases/download/pmd_releases%2F"$pmd_version"/"$pmd_file" || echo "Failed to download pmd. Check errors and try again to complete PMD setup." >&2
    [ -f "$pmd_file" ] && unzip -q "$pmd_file" && mv "$pmd_dir" pmd && rm -f "$pmd_file" && printf "\n\e[1;32m\u2713\e[0m Local PMD binary set up\n"
else
    printf "\e[1;32m\u2713\e[0m PMD binary already exists\n"
fi

mkdir -p pmd/rulesets
download_ruleset=false
[ -f pmd/rulesets/apex.xml ] || download_ruleset=true
if [ -f "$HOME"/.config/pmd/rulesets/apex.xml ] && [ $download_ruleset = true ]; then
    read -r -p "Found global Apex PMD ruleset. Copy that one instead of downloading? (y/N): " rules_yn
    echo
    if [[ "$rules_yn" == [Yy]* ]]; then
        cp "$HOME"/.config/pmd/rulesets/apex.xml pmd/rulesets/
        download_ruleset=false
    fi
fi

if $download_ruleset; then
    printf "\e[1;33m\u2BC5\e[0m Downloading PMD ruleset\n"
    curl -L "$pmd_attentis_ruleset_url" -o pmd/rulesets/apex.xml || echo "Failed to download ruleset. Check errors and try again to complete ruleset setup." >&2
else
    printf "\e[1;32m\u2713\e[0m Apex ruleset for PMD already exists\n"
fi

printf "\e[1;34m-----\n\u279C Setting up validation scripts\n-----\e[0m\n"
if [ ! -d validation_scripts ]; then
    printf "\e[1;33m\u2BC5\e[0m Downloading latest version of validation scripts\n"
    downloaded_scripts=true
    curl -LO "$validations_url"/releases/download/latest/validation_scripts.zip || { echo "Failed to download validation scripts. Check errors and try again to complete setup." >&2 && downloaded_scripts=false; }
    if $downloaded_scripts; then
        unzip -q "$validations_filename" -d validation_scripts
        rm -f "$validations_filename"
        printf "\e[1;32m\u2713\e[0m Validation scripts installed\n"
    fi
else
    printf "\e[1;32m\u2BC5\e[0m Validation scripts directory already exists. Skipping.\n"
fi

printf "\e[1;34m-----\n\u279C Setting up VSCode environment\n-----\e[0m\n"

vscode=true
[ "$(command -v code)" ] || { printf "\e[1;33m\u0021\e[0m VSCode not found, skipping\n" && vscode=false; }

if $vscode; then
    [ -d .vscode ] || mkdir .vscode
    cp "$bootstrap_tmp_dir"/.vscode/extensions.json .vscode
    missing_extensions=$(jq .recommendations[] .vscode/extensions.json | sed 's/"//g' | grep --fixed-strings --line-regexp --invert-match --file <(code --list-extensions) --)
    if [ -z "$missing_extensions" ]; then
        printf "\e[1;32m\u2713\e[0m All recommended VSCode extensions are installed.\n"
    else
        printf "\e[1;33m\u2BC5\e[0m Installing missing VSCode extensions...\n"
        echo "$missing_extensions" | xargs --max-lines=1 code --install-extension
    fi

    if [ ! -f .vscode/settings.json ] || $new_project || cmp -s .vscode/settings.json "$bootstrap_tmp_dir"/"$default_files_dir"/settings.json; then
        printf "\e[1;33m\u2BC5\e[0m Customized .vscode/settings.json file found. Not overwriting.\n"
    else
        cp "$bootstrap_tmp_dir"/.vscode/settings.json .vscode
        printf "\e[1;32m\u2713\e[0m VSCode recommended settings written to local file\n"
    fi
fi
