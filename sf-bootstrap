#!/bin/bash

pmd_version="7.0.0"
pmd_file="pmd-dist-$pmd_version-bin.zip"
pmd_dir="pmd-bin-$pmd_version"
pmd_attentis_ruleset_url="https://raw.githubusercontent.com/Attentis-Consulting-Inc/pmd/main/ruleset.xml"

[ "$(command -v sf)" ] || { echo "Cannot find command sf. Is the sf cli installed?" >&2 && exit 1; }
[ "$(command -v npm)" ] || { echo "Cannot find command npm. Is it installed?" >&2 && exit 1; }
[ -f sfdx-project.json ] || { echo "Must be run from the root of an sfdx project" >&2 && exit 1; }

printf "\e[1;34m-----\n\u279C Setting up repository\n-----\e[0m\n"

if [ -d .git ]; then
    printf "\e[1;33m\u2BC5\e[0m Project is already a git repository\n"
else
    git init >/dev/null && printf "\e[1;32m\u2713\e[0m Repository set up\n"
fi

if [ -f .gitignore-local ]; then
    printf "\e[1;33m\u2BC5\e[0m Found a local git ignore file\n"
else
    ln -sf .git/info/exclude .gitignore-local
    echo ".gitignore-local" >.gitignore-local
    printf "\e[1;32m\u2713\e[0m Created .gitignore-local file.\n"
    printf "\e[1;33m\u0021\e[0m You can use this file to ignore files in git without committing changes to .gitignore\n"
fi

if [ -f .rgignore ]; then
    printf "\e[1;33m\u2BC5\e[0m Found a ripgrep ignore file\n"
elif [ "$(command -v rg)" ]; then
    cp .gitignore .rgignore
    echo ".rgignore" >>.gitignore-local

    printf "\e[1;32m\u2713\e[0m Found rg command and created .rgignore file.\n"
    printf "\e[1;33m\u0021\e[0m You can use this file to ignore files when using ripgrep\n"
fi

printf "\e[1;34m-----\n\u279C Installing Prettier\n-----\e[0m\n"
prettier_installed=false
if [ -n "$(npm ls -p prettier)" ] && [ -n "$(npm ls -p prettier-plugin-apex)" ]; then
    printf "\e[1;32m\u2713\e[0m Prettier and Apex plugin already installed\n"
    prettier_installed=true
else
    {
        npm install prettier prettier-plugin-apex &&
            printf "\n\e[1;32m\u2713\e[0m Prettier and Apex plugin installed\n" &&
            prettier_installed=true
    } || printf "\n\e[1;31m\u274C\e[0m Failed to install Prettier and Apex plugin\n"
fi

if [ $prettier_installed ]; then
    [ -f .prettierrc ] || echo "{\"trailingComma\": \"none\"}" >.prettierrc
    if ! jq -e '.overrides[]' .prettierrc &>/dev/null; then
        temp_prettierrc=$(mktemp)
        jq '.overrides = []' .prettierrc >"$temp_prettierrc"
        mv -- "$temp_prettierrc" .prettierrc
    fi
    if ! jq -e '.overrides[] | select(.files=="*.{cls,trigger}")' .prettierrc &>/dev/null; then
        temp_prettierrc=$(mktemp)
        jq '.overrides += [{"files": "*.{cls,trigger}"}]' .prettierrc >"$temp_prettierrc"
        mv -- "$temp_prettierrc" .prettierrc
        printf "\e[1;32m\u2713\e[0m Created Prettier rules for Apex\n"
    fi
    if ! jq -e '.overrides[] | select(.files=="*.{cls,trigger}").options' .prettierrc &>/dev/null; then
        temp_prettierrc=$(mktemp)
        jq '.overrides = [.overrides[] | select(.files=="*.{cls,trigger}") += {"options": {}}]' .prettierrc >"$temp_prettierrc"
        mv -- "$temp_prettierrc" .prettierrc
    fi
    if [ ! "$(jq -e '.overrides[] | select(.files=="*.{cls,trigger}").options.tabWidth' .prettierrc 2>/dev/null)" = "4" ]; then
        temp_prettierrc=$(mktemp)
        jq '.overrides = [.overrides[] | select(.files=="*.{cls,trigger}").options.tabWidth = 4]' .prettierrc >"$temp_prettierrc"
        mv -- "$temp_prettierrc" .prettierrc
        printf "\e[1;32m\u2713\e[0m Set up tabWidth of 4 for Apex\n"
    fi
    if [ ! "$(jq -e '.overrides[] | select(.files=="*.{cls,trigger}").options.printWidth' .prettierrc 2>/dev/null)" = "120" ]; then
        temp_prettierrc=$(mktemp)
        jq '.overrides = [.overrides[] | select(.files=="*.{cls,trigger}").options.printWidth = 120]' .prettierrc >"$temp_prettierrc"
        mv -- "$temp_prettierrc" .prettierrc
        printf "\e[1;32m\u2713\e[0m Set up printWidth of 120 for Apex\n"
    fi
fi

printf "\e[1;34m-----\n\u279C Setting up PMD\n-----\e[0m\n"

mkdir -p pmd/rulesets
install_pmd=true
if [ "$(command -v pmd)" ]; then
    read -r -p "Found global pmd command, set up local binary anyways? (y/N): " yn
    [[ "$yn" == [Yy]* ]] || install_pmd=false
fi

if [ $install_pmd ]; then
    printf "\e[1;33m\u2BC5\e[0m Downloading PMD v%s\n" $pmd_version
    wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F"$pmd_version"/"$pmd_file" --no-verbose
    { [ -f "$pmd_file" ] && unzip "$pmd_file" -q && mv "$pmd_dir" pmd; } || echo "Failed to download pmd" >&2
fi

download_ruleset=true
if [ -f "$HOME"/.config/pmd/rulesets/apex.xml ]; then
    read -r -p "Found global Apex PMD ruleset. Copy that one? (y/N): " yn
    if [[ "$yn" == [Yy]* ]]; then
        cp "$HOME"/.config/pmd/rulesets/apex.xml pmd/rulesets/
        download_ruleset=false
    fi
fi
if [ $download_ruleset ]; then
    printf "\e[1;33m\u2BC5\e[0m Downloading Attentis ruleset\n"
    wget "$pmd_attentis_ruleset_url" -O pmd/rulesets/apex.xml --no-verbose || echo "Failed to download ruleset" >&2
fi

printf "\e[1;34m-----\n\u279C Setting up ESLint and Jest\n-----\e[0m\n"
sf force lightning lwc test setup && printf "\n\e[1;32m\u2713\e[0m ESLint and Jest set up\n"
